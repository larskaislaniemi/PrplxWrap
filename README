PrplxWrap v2014-02-21

C wrapper for Perple_X v6.6.8
 - Perple_X by Jamie Connolly (see http://www.perplex.ethz.ch/)
 - This wrapper by Lars Kaislaniemi (lars.kaislaniemi@iki.fi)


See individual files INSTRUCTIONS_* for different components:
 - C/PerpleX wrapper
   - Example in dir distexamples/
 - GNU R/PerpleX wrapper
 - Matlab/PerpleX wrapper


=== Installation / using in your own code ===

Edit 'makefile' to include the correct path to folder where your copy of PerpleX
sources is located. You need to have the compiled object file 'meemum.o' which 
will be linked with this wrapper. Do 'make' in the PrplxWrap folder. This will 
produce an object file 'perplex.o'. To use the wrapper in your own code, 
#include the header file 'perple.h' and when compiling, link your program with 
'perplex.o' from this wrapper and 'meemum.o' from PerpleX sources. 


=== API

 Short descriptions here. See 'perplex.c' for full input/output parameter 
 description.


 * int ini_phaseq(char *buildfile)

   This function needs to be called once before using the other function. 
   Parameter 'buildfile' is a char array giving the (path and) name of the 
   configuration file created using PerpleX program BUILD. All paths are 
   relative to the current working directory where your final program will be 
   run (including the paths to database and option files you give in the 
   configuration file).


 * int phaseq(double P, double T, int ncomp, double *comp, int *nphases, 
           double **wtphases, double **cphases, double **sysprop, 
           char **namephases, int dbgprint) 

   Calls the PerpleX minimization routine to find out the stable phases at 
   pressure P and temperature T. Returns the number and the names of the stable 
   phases (nphases, namephases) and the composition of these phases (cphases). 



NB. The PerpleX options file is still effective, for example, phase compositions
are given in wt/mol% depending on what is defined in option file.

NB2. I have tested and used this wrapper in 64 bit Linux (Ubuntu 10.04) with GNU
Fortran and GNU C compiler. I have tried to keep the calls of external functions
as standard as I know, though I have no idea whether this will work with other
than GNU compilers. In this environment the variable sizes (int, double, char,
etc.) in C match those of Fortran variable sizes. This may change depending on
the environment / compiler.
